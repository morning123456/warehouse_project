package kr.or.warehouse.dao;

import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import kr.or.warehouse.command.Criteria;
import kr.or.warehouse.dto.EmployeeVO;
import kr.or.warehouse.dto.HrTypeVO;
import kr.or.warehouse.dto.HrVO;
import kr.or.warehouse.dto.PostPositionVO;
import kr.or.warehouse.dto.VacLogVO;
import kr.or.warehouse.dto.VacProduceVO;
import kr.or.warehouse.dto.VacationVO;
import kr.or.warehouse.service.HrServiceImpl;

@Repository("hrDAO")
public class HrDAOImpl implements HrDAO {

	private static final Logger LOGGER = LoggerFactory.getLogger(HrDAOImpl.class);

	@Autowired
	private SqlSession session;

	@Override
	public List<HrVO> selectHrList(int eno) throws Exception {
		return session.selectList("Hr-Mapper.selectHrList", eno);
	}

	@Override
	public HrTypeVO selectHrType(int eno) throws Exception {
		return session.selectOne("Hr-Mapper.selectHrType", eno);
	}

	@Override
	public HrVO selectHrByDate(Map<String, Object> paramMap) throws Exception {
		return session.selectOne("Hr-Mapper.selectHrByDate", paramMap);
	}

	@Override
	public void updateCondition(EmployeeVO employee) throws Exception {
		session.update("Hr-Mapper.updateCondition", employee);
	}

	@Override
	public EmployeeVO selectEmp(int eno) throws Exception {
		return session.selectOne("Employee-Mapper.selectEmployeeByEno", eno);
	}

	@Override
	public PostPositionVO selectPpsByPpscode(String ppsCode) throws Exception {
		return session.selectOne("Employee-Mapper.selectPpsByPpscode", ppsCode);
	}

	@Override
	public void insertHr(HrVO hr) throws Exception {
		session.update("Hr-Mapper.insertHr", hr);
	}

	@Override
	public List<String> selectHrcodeByHrDate(String hrDate) throws Exception {
		return session.selectList("Hr-Mapper.selectHrcodeByHrDate", hrDate);
	}

	@Override
	public HrVO selectHrByEno(Map<String, Object> paramMap) throws Exception {
		return session.selectOne("Hr-Mapper.selectHrByEno", paramMap);
	}

	@Override
	public List<PostPositionVO> selectPostPosition() throws Exception {
		return session.selectList("Hr-Mapper.selectPostPosition");
	}

	@Override
	public List<EmployeeVO> selectEmpForHrData(String day) throws Exception {
		return session.selectList("Hr-Mapper.selectEmpForHrData", day);
	}

	@Override
	public VacationVO selectVacation(int eno) throws SQLException {
		return session.selectOne("Vacation-Mapper.selectVacation", eno);
	}

	@Override
	public List<Map<String, Date>> selectVacationPeriod(int eno) throws SQLException {
		return session.selectList("Vacation-Mapper.selectVacationPeriod", eno);
	}

	@Override
	public List<VacLogVO> selectVacationUsageHistory(Map<String, Object> vacMap) throws SQLException {
		return session.selectList("Vacation-Mapper.selectVacationUsageHistory", vacMap);
	}

	@Override
	public List<VacProduceVO> selectVacationProduceHistory(Map<String, Object> vacMap) throws SQLException {
		return session.selectList("Vacation-Mapper.selectVacationProduceHistory", vacMap);
	}

	@Override
	public List<EmployeeVO> selectTeamHrList(Criteria cri, int dno) throws Exception {
		int offset = cri.getStartRowNum();
		int limit = cri.getPerPageNum();
		RowBounds rowBounds = new RowBounds(offset, limit);

		Map<String, Object> param = new HashMap<String, Object>();
		param.put("dno", dno);
		param.put("searchType", cri.getSearchType());
		param.put("keyword", cri.getKeyword());

		return session.selectList("Hr-Mapper.selectTeamHrList", param, rowBounds);
	}

	@Override
	public int selectTeamHrListCount(Criteria cri, int dno) throws Exception {
		Map<String, Object> param = new HashMap<String, Object>();
		param.put("dno",dno);
		param.put("searchType", cri.getSearchType());
		param.put("keyword", cri.getKeyword());
		System.out.println("dno : " + dno);
		return session.selectOne("Hr-Mapper.selectTeamHrListCount", param);
	}

	@Override
	public String loginUserDname(int eno) throws Exception {
		return session.selectOne("Hr-Mapper.loginUserDname", eno);
	}

	@Override
	public List<EmployeeVO> selectTeamHrGreenList(Criteria cri, int dno) throws Exception {
		int offset = cri.getStartRowNum();
		int limit = cri.getPerPageNum();
		RowBounds rowBounds = new RowBounds(offset, limit);

		Map<String, Object> param = new HashMap<String, Object>();
		param.put("dno", dno);
		param.put("searchType", cri.getSearchType());
		param.put("keyword", cri.getKeyword());

		return session.selectList("Hr-Mapper.selectTeamHrGreenList", param, rowBounds);
	}

	@Override
	public int selectTeamHrGreenListCount(Criteria cri, int dno) throws Exception {
		Map<String, Object> param = new HashMap<String, Object>();
		param.put("dno",dno);
		param.put("searchType", cri.getSearchType());
		param.put("keyword", cri.getKeyword());
		System.out.println("dno : " + dno);
		return session.selectOne("Hr-Mapper.selectTeamHrGreenListCount", param);
	}

}
