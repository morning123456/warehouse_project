package kr.or.warehouse.service;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.RowBounds;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import kr.or.warehouse.command.Criteria;
import kr.or.warehouse.command.PageMaker;
import kr.or.warehouse.dao.ApprovalDocBoxDAO;
import kr.or.warehouse.dto.EmployeeVO;
import kr.or.warehouse.dto.ManualVO;
import kr.or.warehouse.dto.SignDocVO;
import kr.or.warehouse.dto.SignFormVO;

@Service
public class ApprovalDocBoxServiceImpl implements ApprovalDocBoxService{

	@Autowired
	private ApprovalDocBoxDAO approvalDocBoxDAO;
	
	
	//문서양식
	@Override
	public Map<String, Object> getSignForm() throws SQLException {
		
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<SignFormVO> mySignFormList = approvalDocBoxDAO.selectSignForm();

		dataMap.put("mySignFormList", mySignFormList);

		return dataMap;
	}
	
	
	//전사문서함 리스트
	@Override
	public Map<String, Object> getApprovalList(Criteria cri, String sFormNo) throws SQLException {
		
		// 현재 page 번호에 맞는 리스트를 perPageNum 개수 만큼 가져오기.
		int offset=cri.getStartRowNum();
		int limit=cri.getPerPageNum();
		RowBounds rowBounds=new RowBounds(offset,limit);

		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("searchType", cri.getSearchType());
		paramMap.put("keyword", cri.getKeyword());
		paramMap.put("sFormNo", sFormNo);
		
		
		Map<String, Object>dataMap = new HashMap<String, Object>();
		List<SignDocVO> myApprovalList = approvalDocBoxDAO.selectSearchApprovalList(paramMap, rowBounds);

		PageMaker pageMaker = new PageMaker();
		pageMaker.setCri(cri);
		pageMaker.setTotalCount(myApprovalList.size());

		dataMap.put("myApprovalList", myApprovalList);
		dataMap.put("pageMaker", pageMaker);

		return dataMap;
	}

	
	
	//관심문서
	@Override
	public void favRegist(SignDocVO signDoc) throws SQLException {
		approvalDocBoxDAO.insertFavDoc(signDoc);		
	}


	@Override
	public void favRemove(SignDocVO signDoc) throws SQLException {
		approvalDocBoxDAO.deleteFavDoc(signDoc);		
	}


	@Override
	public Map<String, Object> getFavDocList(Criteria cri, int eno) throws SQLException {
		Map<String, Object> dataMap = new HashMap<String, Object>();

		// 현재 page 번호에 맞는 리스트를 perPageNum 개수 만큼 가져오기.
		int offset=cri.getStartRowNum();
		int limit=cri.getPerPageNum();
		RowBounds rowBounds=new RowBounds(offset,limit);

		List<SignDocVO> favDocList = approvalDocBoxDAO.selectSearchFAVDocList(cri,eno, rowBounds);
		for(SignDocVO signDoc : favDocList) {
			//String name = approvalDocBoxDAO.selectName(signDoc.getManualNo());
			String name = approvalDocBoxDAO.selectName(signDoc.getSignNo());
			signDoc.setName(name);
		}


		// 전체 board 개수
		int totalCount = approvalDocBoxDAO.selectFavDocCriteriaTotalCount(cri,eno);

		// PageMaker 생성.
		PageMaker pageMaker = new PageMaker();
		pageMaker.setCri(cri);
		pageMaker.setTotalCount(totalCount);

		dataMap.put("favDocList", favDocList);
		dataMap.put("pageMaker", pageMaker);

		return dataMap;
	}

	

	
	

	
}
